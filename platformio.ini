; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
; Directory that is used to store compilation artifacts. Default is `.pio`,
; however this is hidden on Windows, so we change it to `build` so we can
; find our firmware in Proteus.
build_dir = build

[env]
; Common config for all environments
platform = atmelavr

; Select optimisation level and enable desired warnings (optional)
; You should customise this to your preference
;
; By default the following settings are set:
;  - Maximum optimisations (compiling with debug as build_type will override this)
;  - All C warnings except -Wpedantic
build_flags =
    -O3
    -Wall -Wextra
    -Wcomment -Wdouble-promotion -Wfloat-conversion -Wfloat-equal
    -Wformat-nonliteral -Wformat-security -Wformat-signedness
    -Wmissing-declarations -Wshadow -Wswitch-default

; The Xplained Mini boards you would have gotten from the ECE store have 2MHz
; clocks.
board_build.f_cpu = 2000000UL

; Your UART baud rate. 9600 is the default and recommended value. Make sure this
; matches whatever you use when you initialise your UART peripheral. 
monitor_speed = 9600

[env:xplainedmini]
board = ATmega328PB

; Upload settings. You shouldn't need to change these.
; Behind the scenes a program called avrdude does the programming: <https://www.nongnu.org/avrdude/>
upload_protocol = custom
upload_port = usb
upload_flags =
    -C
    ${platformio.packages_dir}/tool-avrdude/avrdude.conf
    -p
    $BOARD_MCU
    -P
    $UPLOAD_PORT
    -c
    xplainedmini
upload_command = ${platformio.packages_dir}/tools-avrdude/avrdude $UPLOAD_FLAGS -U flash:w:$SOURCE:i

[env:debug]
; Include symbolic debugging information
build_type = debug
board = ATmega328P

; AVR simulation via simavr. Can be used for basic debugging (UART, logic etc).
; Doesn't support GPIO, ADC simulation out of the box, however simavr does
; support it if you want to dig into it.
;
; To run the simulator, press F5 in VSCode. It should start like a regular
; C/C++ debugging session.
;
; simavr does not support the ATmega328PB (which is what you have on your
; Xplained Mini boards), so we simulate using the ATmega328P - an earlier and
; very similar MCU. You shouldn't notice the difference.
;
; For a more advanced simulator, use Proteus. If you are on Linux or macOS you
; can use Proteus via FlexIT: <https://flexit.auckland.ac.nz>
platform_packages =
    platformio/tool-simavr
debug_tool = custom
debug_server =
    ${platformio.packages_dir}/tool-simavr/bin/simavr
    -m
    atmega328p
    -f
    ${this.board_build.f_cpu}
    -g
    ${platformio.build_dir}/${this.__env__}/firmware.elf
debug_port = :1234
debug_init_cmds =
    define pio_reset_halt_target
       monitor reset halt
    end
    define pio_reset_run_target
       monitor reset
    end
    target remote $DEBUG_PORT
    $INIT_BREAK
    $LOAD_CMD

